<data-capture-requirements dcr-validation="reject-invalid" dtd-system-identifier="http://localhost/iw-cc/datacapture6.0.dtd" xmlns="http://www.interwoven.com/schema/datacapturedtd">
    <ruleset name="Config">
        <script>
            <![CDATA[
            var reviewersIdList = null;
            var reviewersIdReadonlyList = null;
            var datasourceIdReadonlyList = null;
            var datasourceIdHiddenList = null;
            function init() {}
            function setReadonlyDatasourceItems() {
                var dsItemId = datasourceIdReadonlyList.split(",");
                for (i = 0; i < dsItemId.length; i++) {
                    var dsItemObj = IWDatacapture.getItem("/Config/" + dsItemId[i]);
                    if ((dsItemObj != null) && (dsItemObj != undefined)) {
                        try {
                            for (r = 0; r < 5000; r++) {}
                            dsItemObj.setReadOnly(true);
                        } catch (e) {}
                    }
                }
            }
            function setHiddenDatasourceItems() {
                var dsItemId = datasourceIdHiddenList.split(",");
                for (i = 0; i < dsItemId.length; i++) {
                    var dsItemObj = IWDatacapture.getItem("/Config/" + dsItemId[i]);
                    if ((dsItemObj != null) && (dsItemObj != undefined)) {
                        try {
                            for (r = 0; r < 5000; r++) {}
                            dsItemObj.setVisible(false);
                        } catch (e) {}
                    }
                }
            }
            function loadReviewersValues(reviewerItem) {
                var options = reviewerItem.getOptions();
                var newOptions = new Array();
                if ((options != null) && (options != undefined)) {
                    for (j = 0; j < options.length; j++) {
                        newOptions = getOptionValues(options[j], reviewerItem, newOptions);
                    }
                    while (options.length >= 1) {
                        reviewerItem.removeOption(reviewerItem.getOptions().length - 1);
                        options = reviewerItem.getOptions();
                    }
                    reviewerItem.setOptions(newOptions);
                }
            }
            function setReadonlyReviewerItems() {
                var reviewersId = reviewersIdReadonlyList.split(",");
                for (i = 0; i < reviewersId.length; i++) {
                    var reviewerObj = IWDatacapture.getItem("/Config/" + reviewersId[i]);
                    if ((reviewerObj != null) && (reviewerObj != undefined)) {
                        reviewerObj.setReadOnly(true);
                    }
                }
            }
            function enforceMinNoOfReviewers() {
                if ((reviewersIdList != null) && (reviewersIdList != undefined)) {
                    var reviewersId = reviewersIdList.split(",");
                    for (i = 0; i < reviewersId.length; i++) {
                        var reviewerObj = IWDatacapture.getItem("/Config/" + reviewersId[i]);
                        var minNoOfReviewersObj = IWDatacapture.getItem("/Config/" + reviewersId[i] + "-minNoOfReviewers");
                        var minNoOfReviewer = minNoOfReviewersObj.getValue();
                        var options = reviewerObj.getOptions();
                        var selectedOptions = 0;
                        if ((options != null) && (options != undefined)) {
                            for (r = 0; r < options.length; r++) {
                                if (options[r].selected) {
                                    selectedOptions++;
                                }
                            }
                        }
                        if (selectedOptions < minNoOfReviewer && (reviewerObj.isVisible() && reviewerObj.isReadOnly())) {
                            reviewerObj.setFocus();
                            alert("Select atleast " + minNoOfReviewer + " reviewers");
                            return false;
                        } else {}
                    }
                }
                return true;
            }
            function setWAandFill(){
              var WA_path = IWDatacapture.getWorkarea ();
              WA_path = WA_path.substring(0, WA_path.indexOf("WORKAREA/") + 9);
              IWDatacapture.getItem("/Config/save_html").setValue(WA_path);
            }
            function getOptionValues(option, parentItem, newOptions) {
                if ((option != null) && (option != undefined)) {
                    optionValue = option.text;
                    if (optionValue.indexOf("$IW_CV(") > 0) {
                        var prefix = optionValue.substring(0, 2);
                        var beginIndex = optionValue.indexOf("$IW_CV(");
                        var offset = "$IW_CV(".length;
                        beginIndex = beginIndex + offset;
                        var endIndex = optionValue.indexOf(")", beginIndex);
                        var variableId = optionValue.substring(beginIndex, endIndex);
                        var reviewerOption = IWDatacapture.getItem("/Config/" + variableId);
                        var variableValue = reviewerOption.getValue();
                        var cleanValue = variableValue;
                        if (cleanValue.length < 1) {
                            var oriName = optionValue;
                            var newName = oriName.substring(2, oriName.length);
                            newOptions[newOptions.length] = new Option(newName, oriName, false, true);
                        } else {
                            var oriName = optionValue;
                            newOptions[newOptions.length] = new Option(variableValue, oriName, false, true);
                        }
                    } else if (optionValue.indexOf("$IW_DS(") > 0) {
                        var prefix = optionValue.substring(0, 2);
                        var beginIndex = optionValue.indexOf("$IW_DS(");
                        var offset = "$IW_DS(".length;
                        beginIndex = beginIndex + offset;
                        var endIndex = optionValue.indexOf(")", beginIndex);
                        var variableId = optionValue.substring(beginIndex, endIndex);
                        var reviewerOption = IWDatacapture.getItem("/Config/" + variableId);
                        var dsOptions = reviewerOption.getOptions();
                        for (i = 0; i < dsOptions.length; i++) {
                            if ((dsOptions[i] != null) && (dsOptions[i] != undefined)) {
                                var dsOptionValue = dsOptions[i].text;
                                if (dsOptionValue.length > 1) {
                                    newOptions[newOptions.length] = new Option(dsOptionValue, prefix + dsOptionValue, false, true);
                                }
                            }
                        }
                    } else {
                        newOptions[newOptions.length] = new Option(optionValue.substring(2, optionValue.length), optionValue, false, true);
                    }
                }
                return newOptions;
            }/* WORKAROUND: DCT contains a starting element, which has no significance, hidding that element here. this is done to avoid the js error that appears if first element is an item and it is set to hidden/not visibleand when focus is being set to it. If first item is a container then this error does not occur */
            var startingItem = IWDatacapture.getItem("/Config/iw-StartingItem");
            startingItem.setVisible(false);/*_iwdcwin.IWDCEventRegistry.addListener("onSave", enforceMinNoOfReviewers);*/
            IWEventRegistry.addFormHandler("onSave", enforceMinNoOfReviewers);
            IWEventRegistry.addFormHandler("onFormInit", init);
            IWEventRegistry.addFormHandler("onFormInit", setWAandFill);
            ]]>
        </script>
        <root-container name="Config" location="Config">
            <container name="iw-StartingItem" location="iw-StartingItem">
                <label></label>
                <item name="iw-hiddenbugworkaround" pathid="iw-hiddenbugworkaround">
                    <hidden/>
                </item>
            </container>
            <item name="select_tpl" pathid="select_tpl">
                <label>select_tpl</label>
                <description>TPL Name</description>
                <text required="t">
                  <callout url="/iw-bin/iw_cgi_wrapper.cgi/get_tpl.ipl" window-features="width:400" label="select" />
                </text>
            </item>
            <item name="save_html" pathid="save_html">
                <label>save_html</label>
                <description>HTML Location (path of the DCR that initiated the WF is shown by default)</description>
                <text required="t"/>
            </item>
        </root-container>
    </ruleset>
</data-capture-requirements>
